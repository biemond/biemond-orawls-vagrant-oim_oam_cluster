import sys
import getopt
import string

WLHOME='<%= @weblogic_home_dir %>'
DOMAIN_PATH='<%= @domain_dir %>'

bicluster = '<%= @bi_cluster_name %>'

def createFileStore(storeName, serverName):
    create(storeName, 'FileStore')
    cd('/FileStore/' + storeName)
    set ('Target', serverName)
    set ('Directory', storeName)
    cd('/')

def createJMSServers(cluster, track, currentServerCnt):
    print ' '
    print "Creating JMS Servers for the cluster :- ", cluster
    s = ls('/Server')
    print ' '
    clustername = " "
    serverCnt = currentServerCnt
    for token in s.split("drw-"):
        token=token.strip().lstrip().rstrip()
        path="/Server/"+token
        cd(path)
        if not token == 'AdminServer' and not token == '':
            clustername = get('Cluster')
            print "Cluster Associated with the Server [",token,"] :- ",clustername
            print ' '
            searchClusterStr = cluster+":"
            clusterNameStr = str(clustername)
            print "searchClusterStr = ",searchClusterStr
            print "clusterNameStr = ",clusterNameStr
            if not clusterNameStr.find(searchClusterStr) == -1:
                print token, " is associated with ", cluster    
                print ' '
                print "Creating JMS Servers for ", track
                print ' '
                cd('/')

                jmsServerName = 'BIPJMSServer_auto_'+str(serverCnt)
                fileStoreName = 'BIPJMSServerFileStore_auto_'+str(serverCnt)

                createFileStore(fileStoreName, token)
                print "Created File Store :- ", fileStoreName

                create(jmsServerName, 'JMSServer')
                print "Created JMS Server :- ", jmsServerName
                print ' '
                assign('JMSServer', jmsServerName, 'Target', token)
                print jmsServerName, " assigned to server :- ", token 
                print ' '
                cd('/JMSServer/'+jmsServerName)
                set ('PersistentStore', fileStoreName)

                serverCnt = serverCnt + 1


readDomain(DOMAIN_PATH)

cd('/')
delete('BipJmsResource' ,'JMSSystemResource')
delete('BipJmsServer'   ,'JMSServer')
delete('BipJmsStore'    ,'FileStore')

createJMSServers(bicluster, 'bi', 1)

cd('/')
create('BIPJMSModuleUDDs','JMSSystemResource')

cd('/')
cd('JMSSystemResource/BIPJMSModuleUDDs')
assign('JMSSystemResource', 'BIPJMSModuleUDDs', 'Target', bicluster)

cd('/')
cd('JMSSystemResource/BIPJMSModuleUDDs')
create('BIPSubDeployment', 'SubDeployment')

cd('/')
cd('JMSSystemResource/BIPJMSModuleUDDs/SubDeployments/BIPSubDeployment')

print ' '
print ("*** Listing BI JMS Servers ***")
s = ls('/JMSServers')
biJMSServerStr=''
for token in s.split("drw-"):
    token=token.strip().lstrip().rstrip()
    if not token.find("BIPJMSServer_auto") == -1:
        biJMSServerStr = biJMSServerStr + token +","
    print token

biJMSSrvCnt=string.count(s, 'BIPJMSServer_auto')
print ' '
print "Number of BI JMS Servers := ", biJMSSrvCnt
print ' '
print "biJMSServerStr := ", biJMSServerStr
print ' '

print ("*** Setting JMS SubModule for BI JMS Server's target***")
assign('JMSSystemResource.SubDeployment', 'BIPJMSModuleUDDs.BIPSubDeployment', 'Target', biJMSServerStr)

cd('/')
cd('JMSSystemResource/BIPJMSModuleUDDs/JmsResource/NO_NAME_0')

soacf=create('BIP.JMS.CF','ConnectionFactory')
soacf.setJNDIName('BIP.JMS.CF')
cd('/JMSSystemResource/BIPJMSModuleUDDs/JmsResource/NO_NAME_0/ConnectionFactory/BIP.JMS.CF')
set('DefaultTargetingEnabled', 'true')

dumpStack()

updateDomain()
dumpStack()

print 'Successfully Updated OIM/BI Domain.'

closeDomain()